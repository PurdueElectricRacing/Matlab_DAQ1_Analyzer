function DAQ1_f( log_file )
    %DAQ1.m
    %Brad Smrdel
    %Processes data taken from RPI logging as csv and converts to graphs, plots
    delete *.csv;
    
    parse_script = 'parser.py'; 
    system(strjoin({'python', parse_script, log_file}, ' ')); %file is parsed into 7 files
    %dd-mm-yyyy
    
    csv_names = dir('*.csv');
    csv_names = {csv_names.name};
    
    %Read in csv files generated by Python Script
    accel_x = csvread(cell2mat(csv_names(find(~cellfun(@isempty, strfind(csv_names, 'acc_x'))))));
    accel_y = csvread(cell2mat(csv_names(find(~cellfun(@isempty, strfind(csv_names, 'acc_y'))))));
    accel_z = csvread(cell2mat(csv_names(find(~cellfun(@isempty, strfind(csv_names, 'acc_z'))))));
    gyro_x = csvread(cell2mat(csv_names(find(~cellfun(@isempty, strfind(csv_names, 'gyro_x'))))));
    gyro_y = csvread(cell2mat(csv_names(find(~cellfun(@isempty, strfind(csv_names, 'gyro_y'))))));
    gyro_z = csvread(cell2mat(csv_names(find(~cellfun(@isempty, strfind(csv_names, 'gyro_z'))))));
    steer = csvread(cell2mat(csv_names(find(~cellfun(@isempty, strfind(csv_names, 'steer'))))));

    %Convert Accel to g's (the 0.122 taken from Chris's IMU code)
    accel_x(:,2) = accel_x(:,2) * 0.122 / 1000;
    accel_y(:,2) = accel_y(:,2) * 0.122 / 1000;
    accel_z(:,2) = accel_z(:,2) * 0.122 / 1000;

    %Convert Gyro to Degrees (the 8.75 taken from Chris's IMU code)
    gyro_x(:,2) = gyro_x(:,2) * 8.75 / 1000;
    gyro_y(:,2) = gyro_y(:,2) * 8.75 / 1000;
    gyro_z(:,2) = gyro_z(:,2) * 8.75 / 1000;

    %Steering angle degree conversion being done in python script

    %Should be: +X forward, +Y left, +Z up for referencing car direction
    %Currently is: +X left, +Y rear, +Z up on DAQ1 board
    %Format to reflect car is sensor_direction_car
    gyro_x_car = gyro_y(:,2) * -1;
    gyro_y_car = gyro_x(:,2);
    gyro_z_car = gyro_z(:,2);
    accel_x_car = accel_y(:,2) * -1;
    accel_y_car = accel_x(:,2);
    accel_z_car = accel_z(:,2);

    size_x_accel = size(accel_x_car);
    size_y_accel  = size(accel_y_car);
    size_z_accel  = size(accel_z_car);
    size_x_gyro  = size(gyro_x_car);
    size_y_gyro  = size(gyro_y_car);
    size_z_gyro  = size(gyro_z_car);
    
    min_size = min([size_x_accel(:, 1), size_y_accel(:, 1), ...
        size_z_accel(:, 1), size_x_gyro(:, 1), size_y_gyro(:, 1)...
        , size_z_gyro(:, 1)]);
    
    %subplot(3,1,1); %Accel Plot
    figure(1);
    hold on;
    plot(accel_x(1:min_size,1) / 1000, accel_x_car(1:min_size));
    hold on;
    plot(accel_y(1:min_size,1) / 1000, accel_y_car(1:min_size));
    hold on;
    plot(accel_z(1:min_size,1) / 1000, accel_z_car(1:min_size));
    grid on;
    title('Acceleration Plot');
    xlabel('Time [seconds]');
    ylabel('g');
    legend('X', 'Y', 'Z');
    ylim([-4, 4]);
    
    %subplot(3,1,2); %Gyro Plot
    figure(2);
    hold on;
    plot(gyro_x(1:min_size,1) / 1000, gyro_x_car(1:min_size));
    hold on;
    plot(gyro_y(1:min_size,1) / 1000, gyro_y_car(1:min_size));
    hold on;
    plot(gyro_z(1:min_size,1) / 1000, gyro_z_car(1:min_size));
    grid on;
    title('Gyroscope Plot');
    xlabel('Time [seconds]');
    ylabel('Degrees Per Second');
    legend('X', 'Y', 'Z');
    ylim([-245, 245]);

    %subplot(3,1,3); %Steering Angle Plot
    figure(3);
    hold on;
    steer_deg = steer(:,2) * (70 +76) -76;
    plot(steer(:,1) / 1000, steer_deg);
    grid on;
    title('Steering Angle Plot');
    xlabel('Time [seconds]');
    ylabel('Degrees [+ Left, - Right]');
    ylim([-80, 80]); %TODO confirm actual values
end

